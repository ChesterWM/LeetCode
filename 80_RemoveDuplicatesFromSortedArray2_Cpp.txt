class Solution {
public:
    void moveForward(vector<int> &nums, int &actual_num_length, int replace_idx){
        int value = 0, i = 0;
        int copy_idx = 0;
        
        //Look for the copy index
        value = nums[replace_idx];
        for(i = replace_idx+1; i < actual_num_length; i++){
            if(nums[i] != value){
                copy_idx = i;
                break;
            }
        }
        
        if(copy_idx <= replace_idx){
            //cannot find any data to replace
            actual_num_length = replace_idx;
            return;
        }
        
        
        while(copy_idx < actual_num_length){
            nums[replace_idx] = nums[copy_idx];
            replace_idx++;
            copy_idx++;
        }
        actual_num_length -= (copy_idx-replace_idx);
    }
    
    int removeDuplicates(vector<int>& nums) {
        int i = 0, len = 0;
        int counter = 0, value = 0;
        
        len = nums.size();
        if(len){
            value = nums[0];
            counter++;
        } else {
            return 0;
        }
        
        for(i = 1; i < len; i++){
            if(nums[i] != value){
                value = nums[i];
                counter = 1;
            } else {
                if(counter ==2){
                    //swift the nums
                    moveForward(nums, len, i);
                    value = nums[i];
                    counter = 1;
                } else {
                    counter++;
                }
            }
        }
        
        return len;
    }
};