class Solution {
public:
    void merge(vector<int> &nums, int l, int mid, int r){
        int leftsize = mid - l + 1;
        int rightsize = r-(mid+1)+1;
        int i = 0, j = 0, index = 0;
        vector<int> larr(leftsize, 0);
        vector<int> rarr(rightsize, 0);
        
        //Get the left arr from nums
        for(i = 0; i < leftsize; i++){
            larr[i] = nums[l+i];    //start from index l
        }
        
        //Get the right arr from nums
        for(i = 0; i < rightsize; i++){
            rarr[i] = nums[mid+1+i];    //start from index mid+1
        }
        
        //Merge the larr and rarr to nums
        i = 0;
        j = 0;
        index = l;
        while(i < leftsize && j < rightsize){
            if(larr[i] < rarr[j]){
                nums[index] = larr[i];
                i++;
            } else {
                nums[index] = rarr[j];
                j++;
            }
            index++;
        }
        
        //Pack the remaining larr OR rarr if any
        while(i < leftsize){
            nums[index] = larr[i];
            index++;
            i++;
        }
        while(j < rightsize){
            nums[index] = rarr[j];
            index++;
            j++;
        }
    }
    
    void mergeSort(vector<int> &nums, int l, int r){
        int mid = 0;
        
        if(l < r){
            //calculate the mid point
            mid = l + (r-l)/2;  //same as (l+r)/2, this is to avoid overflow if l and r is too large
            
            mergeSort(nums, l, mid);
            mergeSort(nums, mid+1, r);
            
            //Merge
            merge(nums, l, mid, r);
        }
    }
    
    vector<int> sortArray(vector<int>& nums) {
        int size = nums.size();
        int l = 0, r = size - 1;
        
        //Merge sort
        mergeSort(nums, l, r);
        
        return nums;
    }
};

//Insertion Sort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        //Insertion Sort
        int i = 0, j = 0, key = 0;
        for(i = 1; i < nums.size(); i++){
            key = nums[i];
            j = i - 1;
            while(j >= 0 && nums[j] > key){
                nums[j+1] = nums[j];
                j--;
            }
            nums[j+1] = key;
        }
        return nums;
    }
};

//Bubble Sort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {     
        //Bubble sort
        for(int i = 0; i < nums.size()-1; i++){
            bool isSwap = false;
            for(int j = 0; j < nums.size()-1-i; j++){
                if(nums[j] > nums[j+1]){
                    swap(nums[j], nums[j+1]);
                    isSwap = true;
                }
            }
            
            if(isSwap == false){
                break;
            }
        }
        
        return nums;
    }
};


//Selection sort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int min_idx = 0;
        
        //Selection sort
        for(int i = 0; i < nums.size()-1; i++){
            min_idx = i;
            for(int j = i+1; j < nums.size(); j++){
                if(nums[min_idx] > nums[j]){
                    min_idx = j;
                }
            }
            if(min_idx != i){
                swap(nums[min_idx], nums[i]);
            }
        }
        
        return nums;
    }
};

//quicksort
class Solution {
public:
    int partition(vector<int> &nums, int l, int r){
        int i = l - 1;
        int pivot = nums[r];
        
        for(int j = l; j <= r-1; j++){
            if(nums[j] < pivot){
                i++;
                swap(nums[j], nums[i]);
            }
        }
        swap(nums[i+1], nums[r]);
        return i+1;
    }
    
    void quickSort(vector<int> &nums, int l, int r){
        int pivot = 0;
        
        if(l < r){
            pivot = partition(nums, l, r);
            
            quickSort(nums, l, pivot-1);
            quickSort(nums, pivot+1, r);
        }
    }
    
    vector<int> sortArray(vector<int>& nums) {
        int size = nums.size();
        int l = 0, r = size - 1;
        
        //Merge sort
        quickSort(nums, l, r);
        
        return nums;
    }
};