/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
    stack<TreeNode *> nodestack;
    
    void initBST(TreeNode *node){
        if(!node){
            return;
        }
        
        initBST(node->right);
        nodestack.push(node);
        initBST(node->left);
    }
    
    BSTIterator(TreeNode* root) {
        initBST(root);
    }
    
    int next() {
        TreeNode *current = nullptr;
        
        current = nodestack.top();
        nodestack.pop();
        return current->val;
    }
    
    bool hasNext() {
        if(!nodestack.empty()){
            return true;
        } else {
            return false;
        }
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */