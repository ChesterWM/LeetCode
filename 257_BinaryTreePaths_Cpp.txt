/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solver(TreeNode* node, string &s, vector<string> &result){
        string current_string;
        if(!node){
            return;
        } else {
            if(s != ""){
                s += "->";   
            }
        }
        
        //Get the node value to string s
        s += to_string(node->val);
        
        current_string = s;
        if(node->left == nullptr && node->right == nullptr){
            result.push_back(s);
        } else {
            current_string = s;
            solver(node->left, current_string, result);
            current_string = s;
            solver(node->right, current_string, result);
        }
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> result;
        string s = "";
        
        solver(root, s, result);
        return result;
    }
};