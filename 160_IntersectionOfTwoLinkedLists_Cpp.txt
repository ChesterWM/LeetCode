/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *currentA = nullptr;
        ListNode *currentB = nullptr;
        int loop = 0;
        
        if(headA == nullptr || headB == nullptr){
            return nullptr;
        }
        
        currentA = headA;
        currentB = headB;
        
        while(currentA != currentB){
            if(currentA->next){
                currentA = currentA->next;
            } else {
                currentA = headB;
                loop++;
            }
            
            if(currentB->next){
                currentB = currentB->next;
            } else {
                currentB = headA;
                loop++;
            }
            if(loop > 2){
                return nullptr;
            }
        }
        return currentA;
    }
};


//Slow solution!
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        map<ListNode *, int> nodeMap;
        ListNode *currentA = nullptr;
        ListNode *currentB = nullptr;
        
        currentA = headA;
        currentB = headB;
        
        while(currentA || currentB){
            if(currentA){
                nodeMap[currentA]++;
                currentA = currentA->next;
            }
            
            if(currentB){
                nodeMap[currentB]++;
                currentB = currentB->next;
            }
        }
        
        for(auto x : nodeMap){
            if(x.second >= 2){
                return x.first;
            }
        }
        return nullptr;
    }
};