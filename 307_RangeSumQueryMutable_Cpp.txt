class NumArray {
public:
    vector<int> vals;
    vector<int> st;
    int size;
    
    int constructST(int si, int ss, int se){
        if(ss == se){
            st[si] = vals[ss];
            return vals[ss];
        }
        
        int mid = (ss + se) / 2;
        st[si] = constructST(2 * si + 1, ss, mid) + //left node
                    constructST(2 * si + 2, mid + 1, se);  //right node
        return st[si];
    }
    
    NumArray(vector<int>& nums) : size(nums.size()), st(4*nums.size(), 0) {
        vals = nums;
        constructST(0, 0, size-1);
    }
    
    void updateST(int si, int ss, int se, int index, int diff){
        if(index < ss || index > se){
            return;
        }
        if(ss > se){
            return;
        }
        
        //update the node with diff
        st[si] += diff;
        if(ss != se){
            int mid = (ss + se) / 2;
            updateST(2 * si + 1, ss, mid, index, diff);
            updateST(2 * si + 2, mid + 1, se, index, diff);
        }
    }
    
    void update(int index, int val) {
        int diff = 0;
        
        if(index < 0 || index > size-1){
            return;
        }
        diff = val - vals[index];
        vals[index] = val;
        updateST(0, 0, size-1, index, diff);
    }
    
    int getSum(int si, int ss, int se, int left, int right){
        if(left <= ss && right >= se){
            return st[si];
        }
        if(left > se || right < ss){
            return 0;
        }
        
        int mid = (ss + se) / 2;
        return getSum(2 * si + 1, ss, mid, left, right) + 
            getSum(2 * si + 2, mid + 1, se, left, right);
    }
    
    int sumRange(int left, int right) {
        return getSum(0, 0, size - 1, left, right);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */