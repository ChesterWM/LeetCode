/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int search(vector<int> &inorder, int inStart, int inEnd, int value){
        int i = 0;
        for(i = inStart; i <= inEnd; i++){
            if(inorder[i] == value){
                break;
            }
        }
        return i;
    }
    
    TreeNode *solver(vector<int> &inorder, vector<int> &preorder, int inStart, int inEnd, int &preIndex){ 
        if(inStart > inEnd){
            return nullptr;
        }
        
        TreeNode *node = new TreeNode(preorder[preIndex]);
        preIndex++;
        
        if(inStart == inEnd){
            return node;
        }
        
        int inIndex = search(inorder, inStart, inEnd, node->val);
        
        node->left = solver(inorder, preorder, inStart, inIndex-1, preIndex);
        node->right = solver(inorder, preorder, inIndex+1, inEnd, preIndex);
        
        return node;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIndex = 0;
        return solver(inorder, preorder, 0, inorder.size()-1, preIndex);
    }
};