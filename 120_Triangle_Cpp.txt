class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        vector<vector<int>>dp_triangle;
        int numRow = triangle.size();
        int rowMin = 0;
        
        dp_triangle.push_back(triangle[0]);
        for(int i = 1; i < numRow; i++){
            vector<int> dp_row;
            for(int j = 0; j < triangle[i].size(); j++){
                if(j == 0){
                    dp_row.push_back(dp_triangle[i-1][j] + triangle[i][j]);
                } else if(j == triangle[i].size()-1){
                    dp_row.push_back(dp_triangle[i-1][j-1] + triangle[i][j]);
                } else {
                    rowMin = min(dp_triangle[i-1][j-1] + triangle[i][j], dp_triangle[i-1][j] + triangle[i][j]);
                    dp_row.push_back(rowMin);
                }
            }
            //Push the dp_row to dp_triangle
            dp_triangle.push_back(dp_row);
        }
        
        //return the minimum value in the last row of dp_triangle
        rowMin = 100000;
        for(int i = 0; i < dp_triangle.back().size(); i++){
            rowMin = min(rowMin, dp_triangle.back()[i]);
        }
        
        return rowMin;
    }
};