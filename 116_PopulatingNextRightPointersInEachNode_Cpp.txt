/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node *> q;
        Node *previousNode = nullptr;
        
        if(!root){
            return root;
        }
        
        q.push(root);
        while(!q.empty()){
            int len = q.size();
            
            for(int i = 0; i < len; i++){
                if(previousNode == nullptr){
                    previousNode = q.front();
                } else {
                    previousNode->next = q.front();
                    previousNode = q.front();
                }
                
                if(q.front()->left){
                    q.push(q.front()->left);
                }
                if(q.front()->right){
                    q.push(q.front()->right);
                }
                
                //Pop the element in queue
                q.pop();
            }
            
            previousNode = nullptr;
        }
        
        return root;
    }
};