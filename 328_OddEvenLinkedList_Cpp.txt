/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        ListNode *oddList = nullptr;
        ListNode *oddHead = nullptr;
        ListNode *evenList = nullptr;
        ListNode *evenHead = nullptr;
        ListNode *current = nullptr;
        bool toggle = true;
        
        current = head;
        
        if(current){
            oddList = current;
            oddHead = oddList;
            if(current->next){
                current = current->next;
                evenList = current;
                evenHead = evenList;
            } else {
                return head;
            }
        } else {
            return nullptr;
        }
        
        current = current->next;
        
        while(current){
            if(toggle){
                toggle = false;
                oddList->next = current;
                oddList = oddList->next;
            } else {
                toggle = true;
                evenList->next = current;
                evenList = evenList->next;
            }
            
            current = current->next;
        }
        
        //End both oddList and evenList
        oddList->next = nullptr;
        evenList->next = nullptr;
        
        oddList->next = evenHead;
        return oddHead;
    }
};