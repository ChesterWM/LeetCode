//Prefix Tree
class TrieNode {
public:
    TrieNode *child[26];
    bool end = false;
};

class Trie {
private:
    TrieNode *root;
public:
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *argv = root;
        
        for(int i = 0; i < word.length(); i++){
            if(argv->child[word[i] - 'a'] == nullptr){
                TrieNode *child = new TrieNode();
                argv->child[word[i] - 'a'] = child;
                argv = child;
            } else {
                argv = argv->child[word[i] - 'a'];
            }
        }
        
        argv->end = true;
    }
    
    bool search(string word) {
        TrieNode *argv = root;
        
        for(int i = 0; i < word.length(); i++){
            argv = argv->child[word[i] - 'a'];
            if(argv == nullptr){
                return false;
            }
        }
        
        if(!argv->end){
            return false;
        }
        return true;
    }
    
    bool startsWith(string prefix) {
        TrieNode *argv = root;
        
        for(int i = 0; i < prefix.length(); i++){
            argv = argv->child[prefix[i] - 'a'];
            if(argv == nullptr){
                return false;
            }
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */