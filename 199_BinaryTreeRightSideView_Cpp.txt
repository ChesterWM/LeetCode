/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solver(TreeNode *node, int level, vector<int> &result){
        if(!node){
            return;
        }
        
        if(level == result.size()){
            result.push_back(node->val);
        }
        
        solver(node->right, level + 1, result);
        solver(node->left, level + 1, result);
    }
    
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        
        solver(root, 0, result);
        return result;
    }
};

//Slow solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<TreeNode *> q;
        vector<int> result;
        
        if(!root){
            return result;
        }
        
        q.push(root);
        while(!q.empty()){
            int len = q.size();
            bool right_view = false;
            for(int i = 0; i < len; i++){
                if(!right_view){
                    right_view = true;
                    result.push_back(q.front()->val);
                }
                if(q.front()->right){
                    q.push(q.front()->right);
                }
                if(q.front()->left){
                    q.push(q.front()->left);
                }
                q.pop();
            }
        }
        
        return result;
    }
};