class Solution {
public:
    void dfs(vector<vector<char>> &grid, int r, int c){
        if(r < 0 || c < 0 || r >= grid.size() || c >= grid[0].size() || grid[r][c] != '1'){
            return;
        }
        //Mark the current grid value as 2, indicate we have processed this grid already
        grid[r][c] = '2';
        
        dfs(grid, r-1, c);  //Up
        dfs(grid, r+1, c);  //Down
        dfs(grid, r, c-1);  //Left
        dfs(grid, r, c+1);  //Right
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int r = 0, c = 0, total = 0;
        
        for(int i = 0; i < (m*n); i++){
            r = i / n;
            c = i % n;
            
            if(grid[r][c] == '1'){
                dfs(grid, r, c);
                total++;
            }
        }
        
        return total;
    }
};