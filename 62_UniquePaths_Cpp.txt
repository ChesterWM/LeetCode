class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<long long int>> dp(m, vector<long long int>(n, 0));
        
        //Approach: calculate all the propabilities in dp[m][n]
        
        //Initialize the dp for top row and left most colume
        //Top row, as robot can move from left to right, only 1 possibility in single row
        for(int i = 0; i < n; i++){
            dp[0][i] = 1;
        }
        
        //Leftmost colume, 1 possibility as well
        for(int i = 0; i < m; i++){
            dp[i][0] = 1;
        }
        
        //Fill up all the remaining dp[m][n]
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                //robot can either move down or right
                dp[i][j] = dp[i][j-1] + dp[i-1][j]; //(dp from left) + (dp from top)
            }
        }
        
        return dp[m-1][n-1];
    }
};