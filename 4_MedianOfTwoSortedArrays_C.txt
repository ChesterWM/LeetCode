

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
    int total_nums = nums1Size + nums2Size;
    int* nums = malloc(sizeof(int) * total_nums);
    int array1_idx = 0, array2_idx = 0, i = 0;
    double median = 0;
    
    for(i = 0; i < total_nums; i++){
        //Check the 2 arrays and get the smaller value
        if(array1_idx < nums1Size && array2_idx < nums2Size){
            if(nums1[array1_idx] < nums2[array2_idx]){
                nums[i] = nums1[array1_idx];
                array1_idx++;
            } else if(nums1[array1_idx] > nums2[array2_idx]){
                nums[i] = nums2[array2_idx];
                array2_idx++;
            } else {
                //Both number are the same
                nums[i] = nums1[array1_idx];
                nums[i+1] = nums2[array2_idx];
                array1_idx++;
                array2_idx++;
                i++;
            }
        } else if(array1_idx < nums1Size && array2_idx >= nums2Size){
            //Only consider the array1
            nums[i] = nums1[array1_idx];
            array1_idx++;
        } else if(array1_idx >= nums1Size && array2_idx < nums2Size){
            //Only consider the array2
            nums[i] = nums2[array2_idx];
            array2_idx++;
        } else {
            //Stop the for loop
            break;
        }
    }
    
    //Check if the total is even/odd
    if(total_nums % 2 == 0){
        //Even
        int idx = total_nums/2;
        median = (((double)nums[idx-1] + (double)nums[idx])/2);
    } else {
        //Odd
        median = (double)nums[(total_nums - 1)/2];
    }
    return median;
    
}