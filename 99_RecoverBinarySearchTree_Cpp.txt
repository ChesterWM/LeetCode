/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getInOrderTraversal(TreeNode *node, vector<int> &order){
        if(node == nullptr){
            return;
        }
        
        getInOrderTraversal(node->left, order);
        order.push_back(node->val);
        getInOrderTraversal(node->right, order);
    }
    
    void putInOrderTraversal(TreeNode *node, vector<int> &order, int &pos){
        if(node == nullptr){
            return;
        }
        
        putInOrderTraversal(node->left, order, pos);
        node->val = order[pos++];
        putInOrderTraversal(node->right, order, pos);
    }
    
    void recoverTree(TreeNode* root) {
        vector<int> order;
        int pos = 0;
        
        //Get the inoder traversal of the tree
        getInOrderTraversal(root, order);
        
        //sort the order
        sort(order.begin(), order.end());
        
        //Re-Construct the binary tree
        putInOrderTraversal(root, order, pos);
    }
};