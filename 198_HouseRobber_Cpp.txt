//Clear solution
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        if(n == 0){
            return 0;
        } else if(n == 1){
            return nums[0];
        } else if(n == 2){
            return max(nums[0], nums[1]);
        }
        
        vector<int> dp(n, 0);
        
        dp[0] = nums[0];
        dp[1] = max(nums[0], nums[1]);
        for(int i = 2; i < n; i++){
            dp[i] = max(nums[i] + dp[i-2], dp[i-1]);
        }
        return dp[n-1];
    }
};

//My solution
class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(), 0);
        
        for(int i = 0; i < nums.size(); i++){
            if(i < 2){
                dp[i] = nums[i];
            } else if(i == 2){
                dp[i] = nums[i] + dp[i-2];
            } else {
                dp[i] = nums[i] + max(dp[i-2], dp[i-3]);
            }
        }
        
        if(nums.size() == 1){
            return dp[nums.size()-1];
        } else {
            return max(dp[nums.size()-1], dp[nums.size()-2]);
        }
    }
};