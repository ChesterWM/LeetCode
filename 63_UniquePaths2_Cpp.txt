class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = 0, n = 0, flag = 0;
        
        m = obstacleGrid.size();
        n = obstacleGrid[0].size();
        
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        //Initialize the dp fpr top row and leftmost colume
        for(int i = 0; i < n; i++){
            if(obstacleGrid[0][i]){
                flag = 1;
                dp[0][i] = 0;
            } else {
                if(flag){
                    dp[0][i] = 0;
                } else {
                    dp[0][i] = 1;
                }
            }
        }
        flag = 0;
        for(int i = 0; i < m; i++){
            if(obstacleGrid[i][0]){
                flag = 1;
                dp[i][0] = 0;
            } else {
                if(flag){
                    dp[i][0] = 0;
                } else {
                    dp[i][0] = 1;
                }
            }
        }
        
        //Mark the obtacle grid as 0
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(obstacleGrid[i][j]){
                    dp[i][j] = 0;
                }
            }
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                //robot can either move down or right
                if(dp[i][j] == -1){
                    dp[i][j] = dp[i][j-1] + dp[i-1][j]; //(dp from left) + (dp from top)
                }
            }
        }
        
        return dp[m-1][n-1];
    }
};