class Solution {
public:
    int boardValue(vector<vector<int>>& board, int row, int col){
        int m = board.size();
        int n = board[0].size();
        
        if(row >= 0 && col >= 0 && row <= m-1 && col <= n-1){
            return (board[row][col] > 0)? 1 : 0;
        } else {
            return 0;
        }
    }
    
    int neighborsCount(vector<vector<int>>& board, int row, int col){
        int m = board.size();
        int n = board[0].size();
        int count = 0;
        
        for(int i = 0; i < 3; i++){
            for(int j = 0; j < 3; j++){
                if(!(i == 1 && j == 1)){
                    count += boardValue(board, row - 1 + i, col - 1 + j);
                }
            }
        }
        return count;
    }
    
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size();
        int n = board[0].size();
        int count = 0;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                count = neighborsCount(board, i, j);
                
                if(board[i][j]){
                    if(count < 2){
                        board[i][j] = 2;    //newly dead
                    } else if(count <= 3){
                        board[i][j] = 1;
                    } else {
                        board[i][j] = 2;    //newly dead
                    }
                } else {
                    if(count == 3){
                        board[i][j] = -1;   //newly alive
                    } else {
                        board[i][j] = 0;
                    }
                }
            }
        }
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == -1){
                    board[i][j] = 1;
                }
                if(board[i][j] == 2){
                    board[i][j] = 0;
                }
            }
        }
    }
};